import customtkinter as ctk
from gui.login_page import LoginPage
from gui.home_page import HomePage
from gui.menu_page import MenuPage
from gui.orders_page import OrdersPage
from gui.reports_page import ReportsPage
from gui.settings_page import SettingsPage
from gui.user_management_page import UserManagementPage
from gui.menu_management_page import MenuManagementPage
from gui.signup_page import SignupPage
from gui.forgot_password_page import ForgotPasswordPage
from database.init_db import init_database

class SmartBitesApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        # Initialize database
        init_database()

        # Configure window
        self.title("SmartBites")
        self.geometry(f"{1200}x{800}")
        self.minsize(800, 600)

        # Initialize current user
        self.current_user = None

        # Set theme
        ctk.set_appearance_mode("light")
        ctk.set_default_color_theme("blue")

        # Configure grid
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        # Create container
        container = ctk.CTkFrame(self)
        container.grid(row=0, column=0, sticky="nsew")
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        # Dictionary to store frames
        self.frames = {}

        # Create frames
        for F in (LoginPage, HomePage, MenuPage, OrdersPage, ReportsPage, 
                 SettingsPage, UserManagementPage, MenuManagementPage,
                 SignupPage, ForgotPasswordPage):
            frame = F(container, self)
            self.frames[F.__name__] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        # Show login page
        self.show_frame("LoginPage")

    def show_frame(self, page_name):
        frame = self.frames[page_name]
        frame.tkraise()
        if hasattr(frame, 'reset_form'):
            frame.reset_form()

    def show_page(self, page_name):
        self.show_frame(page_name)

    def show_home_page(self):
        self.show_frame("HomePage")

    def logout(self):
        self.current_user = None
        self.show_frame("LoginPage")

    def show_login_page(self):
        self.show_frame("LoginPage")

    def show_signup_page(self):
        self.show_frame("SignupPage")

    def show_orders_page(self):
        self.show_frame("OrdersPage")

    def show_menu_management_page(self):
        self.show_frame("MenuManagementPage")

    def show_user_management_page(self):
        self.show_frame("UserManagementPage")

    def show_reports_page(self):
        self.show_frame("ReportsPage")

    def show_settings_page(self):
        self.show_frame("SettingsPage")

    def show_cart_page(self):
        # This will be implemented when we create the cart page
        pass

    def show_order_status_page(self):
        # This will be implemented when we create the order status page
        pass

    def export_report(self):
        from reportlab.lib.pagesizes import letter
        from reportlab.pdfgen import canvas
        from reportlab.lib import colors
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.platypus import Paragraph, Table, TableStyle
        from reportlab.lib.units import inch
        from datetime import datetime
        from tkinter import filedialog
        from tkinter import messagebox

        # Gather data for the report
        report_data = self.get_report_data()  # This method should return the data you want to export

        # Open file dialog to choose save location
        file_path = filedialog.asksaveasfilename(defaultextension='.pdf',
                                               filetypes=[('PDF files', '*.pdf'), ('All files', '*.*')])
        if not file_path:
            return  # User canceled the save dialog

        try:
            # Create PDF with better styling
            c = canvas.Canvas(file_path, pagesize=letter)
            width, height = letter

            # Add a light gray background header
            c.setFillColor(colors.lightgrey)
            c.rect(0, height - 120, width, 120, fill=True)
            
            # Header with logo placeholder
            c.setFillColor(colors.black)
            c.setFont("Helvetica-Bold", 24)
            c.drawString(inch, height - 40, "SmartBites - Admin End")
            
            # Report title with current date
            current_date = datetime.now().strftime("%Y-%m-%d")
            c.setFont("Helvetica", 14)
            c.drawString(inch, height - 60, f"Daily Order Report - {current_date}")
            c.setFont("Helvetica", 12)
            c.drawString(inch, height - 80, "University Cafeteria")
            c.drawString(inch, height - 100, "Generated By: SmartBites Admin Panel")

            # Add decorative line
            c.setStrokeColor(colors.blue)
            c.setLineWidth(2)
            c.line(inch, height - 130, width - inch, height - 130)

            # Summary Section with box
            y = height - 180
            c.setFillColor(colors.blue)
            c.rect(inch, y, width - 2*inch, 80, fill=False)
            c.setFillColor(colors.black)
            
            c.setFont("Helvetica-Bold", 16)
            c.drawString(1.2*inch, y + 60, "Summary Section")
            c.setFont("Helvetica", 12)
            c.drawString(1.2*inch, y + 40, f"Total Orders Processed: 13")
            c.drawString(1.2*inch, y + 25, f"Total Revenue: Rs. 527.29")
            c.drawString(1.2*inch, y + 10, f"Active Users: 3")

            # Order Breakdown Section
            y = height - 300
            c.setFont("Helvetica-Bold", 16)
            c.drawString(inch, y, "Order Breakdown")
            
            # Create table headers
            data = [['Order ID', 'User ID', 'Items', 'Time', 'Amount (PKR)']]
            # Add sample data rows
            data.extend([
                ['1', 'U001', 'Burger x2', '10:30 AM', '250'],
                ['2', 'U002', 'Pizza x1', '11:45 AM', '277.29']
            ])

            table = Table(data, colWidths=[1*inch, 1*inch, 2*inch, 1.2*inch, 1.3*inch])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.blue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ]))
            table.wrapOn(c, width, height)
            table.drawOn(c, inch, y - 100)

            # Analytics Section
            y = height - 500
            c.setFont("Helvetica-Bold", 16)
            c.drawString(inch, y, "Analytics Insights")
            c.setFont("Helvetica", 12)
            c.drawString(inch, y - 25, "Peak Order Hours: 11:00 AM - 2:00 PM")
            c.drawString(inch, y - 45, "Most Popular Items: Burger, Pizza")
            c.drawString(inch, y - 65, "Payment Methods: Cash (60%), Card (40%)")

            # Footer
            c.setFont("Helvetica-Italic", 8)
            c.drawString(inch, inch, f"Report generated on {current_date}")
            c.drawString(width - 3*inch, inch, "Page 1 of 1")

            c.save()
            messagebox.showinfo('Success', 'Report exported successfully!')
        except Exception as e:
            messagebox.showerror('Error', f'Failed to export report: {str(e)}')

if __name__ == "__main__":
    app = SmartBitesApp()
    app.mainloop()
